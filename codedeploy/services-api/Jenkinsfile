#!/usr/bin/env groovy
def APP_NAME = 'services-api'
def APP_CODEDEPLOY_DIR = "codedeploy/${APP_NAME}"

//legacy-naviance-student-mobile-api
def APP_NAME_MOBILE_API = 'legacy-naviance-student-mobile-api'
def APP_REPO_MOBILE_API = 'legacy-naviance-student-mobile-api'
def APP_REPO_URL_MOBILE_API = "https://github.com/naviance/${APP_REPO_MOBILE_API}"
def APP_DESCRIPTION_MOBILE_API = [ 
    "Git Branch, Tag, or Commit reference for ${APP_NAME_MOBILE_API}",
    'Use `master` for PHP 5.3 & PHP 5.6',
].join('\n')
def APP_DEFAULT_BRANCH_MOBILE_API = 'master'

//naviance-auth-bridge
def APP_NAME_AUTH_BRIDGE = 'naviance-auth-bridge'
def APP_REPO_AUTH_BRIDGE = 'naviance-auth-bridge'
def APP_REPO_URL_AUTH_BRIDGE = "https://github.com/naviance/${APP_REPO_AUTH_BRIDGE}"
def APP_DESCRIPTION_AUTH_BRIDGE = [ 
    "Git Branch, Tag, or Commit reference for ${APP_NAME_AUTH_BRIDGE}",
    'Use `develop` for PHP 5.3 & PHP 5.6',
].join('\n')
def APP_DEFAULT_BRANCH_AUTH_BRIDGE = 'develop'

//naviance-student-college-bridge
def APP_NAME_STUDENT_COLLEGE_BRIDGE = 'naviance-student-college-bridge'
def APP_REPO_STUDENT_COLLEGE_BRIDGE = 'naviance-student-college-bridge'
def APP_REPO_URL_STUDENT_COLLEGE_BRIDGE = "https://github.com/naviance/${APP_NAME_STUDENT_COLLEGE_BRIDGE}"
def APP_DESCRIPTION_STUDENT_COLLEGE_BRIDGE = [ 
    "Git Branch, Tag, or Commit reference for ${APP_NAME_STUDENT_COLLEGE_BRIDGE}",
    'Use `develop` for PHP 5.3 & PHP 5.6',
].join('\n')
def APP_DEFAULT_BRANCH_STUDENT_COLLEGE_BRIDGE = 'develop'

//legacy-nav-api-v1
def APP_NAME_NAV_API_V1 = 'legacy-nav-api-v1'
def APP_REPO_NAV_API_V1 = 'legacy-nav-api-v1'
def APP_REPO_URL_NAV_API_V1 = "https://github.com/naviance/${APP_REPO_NAV_API_V1}"
def APP_DESCRIPTION_NAV_API_V1 = [ 
    "Git Branch, Tag, or Commit reference for ${APP_NAME_NAV_API_V1}",
    'Use `feature/aws-migration` for PHP 5.3 & PHP 5.6 until it gets merged to `develop`',
].join('\n')
def APP_DEFAULT_BRANCH_NAV_API_V1 = 'feature/aws-migration'

//legacy-nav-api-v2
def APP_NAME_NAV_API_V2 = 'legacy-nav-api-v2'
def APP_REPO_NAV_API_V2 = 'legacy-nav-api-v2'
def APP_REPO_URL_NAV_API_V2 = "https://github.com/naviance/${APP_REPO_NAV_API_V2}"
def APP_DESCRIPTION_NAV_API_V2 = [ 
    "Git Branch, Tag, or Commit reference for ${APP_NAME_NAV_API_V2}",
    'Use `feature/php-56-upgrade` for PHP 5.6 until it gets merged to `develop`',
    'Use `feature/aws-migration` for PHP 5.3 until it gets merged to `develop`',
].join('\n')
def APP_DEFAULT_BRANCH_NAV_API_V2 = 'feature/aws-migration'

//assessment-api-prototype
def APP_NAME_NAV_SERV_BETA_ASSESSMENT = 'assessment-api-prototype'
def APP_REPO_NAV_SERV_BETA_ASSESSMENT = 'assessment-api-prototype'
def APP_REPO_URL_NAV_SERV_BETA_ASSESSMENT = "https://github.com/naviance/${APP_REPO_NAV_SERV_BETA_ASSESSMENT}"
def APP_DESCRIPTION_NAV_SERV_BETA_ASSESSMENT = [ 
    "Git Branch, Tag, or Commit reference for ${APP_NAME_NAV_SERV_BETA_ASSESSMENT}",
    'Use `feature/php-56-upgrade` for PHP 5.6 until it gets merged to `develop`',
    'Use `feature/aws-migration` for PHP 5.3 until it gets merged to `develop`',
].join('\n')
def APP_DEFAULT_BRANCH_NAV_SERV_BETA_ASSESSMENT = 'feature/aws-migration'

//succeed-legacy
def APP_NAME_SUCCEED_LEGACY = 'succeed-legacy'
def APP_REPO_SUCCEED_LEGACY = 'succeed-legacy'
def APP_REPO_URL_SUCCEED_LEGACY = "https://github.com/naviance/${APP_REPO_SUCCEED_LEGACY}"
def APP_DESCRIPTION_SUCCEED_LEGACY = [ 
    "Git Branch, Tag, or Commit reference for ${APP_NAME_SUCCEED_LEGACY}",
    'For releases intended for production, prefer using `master` or a numbered release tag.',
    'Use `develop` for PHP 5.6',
    'Use `develop-53` to test development work for PHP 5.3',
].join('\n')
def APP_DEFAULT_BRANCH_SUCCEED_LEGACY = 'master'

// Credential id name for AWS S3 access to obtain Jenkins config files.
def AWS_DEV_CREDENTIAL_ID = 'unmanaged-jenkins-terraform'
def default_timeout_minutes = 20

def wrapStep = { steps ->
    withCredentials([usernamePassword(credentialsId: AWS_DEV_CREDENTIAL_ID,
                                      passwordVariable: 'AWS_SECRET_ACCESS_KEY',
                                      usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
        wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm', 'defaultFg': 1, 'defaultBg': 2]) {
              // This is the current syntax for invoking a build wrapper, naming the class.
              wrap([$class: 'TimestamperBuildWrapper']) {
                  steps()
              }
        }
    }
}

properties([
    parameters([
        choiceParam(name: 'php_version',
                    defaultValue: "5.6",
                    description: 'PHP version to build',
                    choices: [
                       "5.3",
                       "5.6",
                    ].join("\n")),
        string(name: 'git_branch_tag_or_commit_MOBILE_API',
               description: APP_DESCRIPTION_MOBILE_API,
               defaultValue: APP_DEFAULT_BRANCH_MOBILE_API),
        string(name: 'git_branch_tag_or_commit_AUTH_BRIDGE', 
               description: APP_DESCRIPTION_AUTH_BRIDGE,
               defaultValue: APP_DEFAULT_BRANCH_AUTH_BRIDGE),
        string(name: 'git_branch_tag_or_commit_STUDENT_COLLEGE_BRIDGE', 
               description: APP_DESCRIPTION_STUDENT_COLLEGE_BRIDGE,
               defaultValue: APP_DEFAULT_BRANCH_STUDENT_COLLEGE_BRIDGE),
        string(name: 'git_branch_tag_or_commit_NAV_API_V1',
               description: APP_DESCRIPTION_NAV_API_V1,
               defaultValue: APP_DEFAULT_BRANCH_NAV_API_V1),
        string(name: 'git_branch_tag_or_commit_NAV_API_V2', 
               description: APP_DESCRIPTION_NAV_API_V2,
               defaultValue: APP_DEFAULT_BRANCH_NAV_API_V2),
        string(name: 'git_branch_tag_or_commit_NAV_SERV_BETA_ASSESSMENT', 
               description: APP_DESCRIPTION_NAV_SERV_BETA_ASSESSMENT,
               defaultValue: APP_DEFAULT_BRANCH_NAV_SERV_BETA_ASSESSMENT),        
        string(name: 'git_branch_tag_or_commit_SUCCEED_LEGACY',
               description: APP_DESCRIPTION_SUCCEED_LEGACY,
               defaultValue: APP_DEFAULT_BRANCH_SUCCEED_LEGACY),
        string(name: 'deploy_git_branch_tag_or_commit',
               description: 'Git Branch, Tag, or Commit reference for Cloud Deployment Scripts',
               defaultValue: 'master')
    ])
])

stage('Checkout') {    
    node {
        timeout(time:default_timeout_minutes, unit:'MINUTES') {
            sh 'sudo chown -Rh $USER:$USER .'
            dir('cloud-deployment-scripts') {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '${deploy_git_branch_tag_or_commit}']],
                    extensions: [[$class: 'CloneOption', noTags: false, reference: '', shallow: true]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        credentialsId: 'github-api-hobsonsbuildserver-v2',
                        url: 'https://github.com/naviance/cloud-deployment-scripts'
                    ]]
                ])
                // Thanks Stack Overflow https://stackoverflow.com/a/34321368/424301
                sh 'sudo git clean -fdx && cp env.sh.sample env.sh'
            }
            dir(APP_REPO_MOBILE_API) {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '${git_branch_tag_or_commit_MOBILE_API}']],
                    extensions: [[$class: 'CloneOption', noTags: false, reference: '', shallow: true]],
                    doGenerateSubmoduleConfigurations: false,
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        credentialsId: 'github-api-hobsonsbuildserver-v2',
                        url: APP_REPO_URL_MOBILE_API
                    ]]
                ])
                sh 'sudo git clean -fdx && sudo rm -rf build'
                def author = sh (
                    script: 'git --no-pager show -s --format=%ae',
                    returnStdout: true
                ).trim()
                def revision = sh (
                    script: 'git describe --always --tags --long',
                    returnStdout: true
                ).trim()
                currentBuild.displayName = "#${BUILD_NUMBER}: ${git_branch_tag_or_commit_MOBILE_API} (PHP ${params.php_version})"
                currentBuild.description = "Revision ${revision} by ${author}"
            }
            dir(APP_REPO_AUTH_BRIDGE) {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '${git_branch_tag_or_commit_AUTH_BRIDGE}']],
                    extensions: [[$class: 'CloneOption', noTags: false, reference: '', shallow: true]],
                    doGenerateSubmoduleConfigurations: false,
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        credentialsId: 'github-api-hobsonsbuildserver-v2',
                        url: APP_REPO_URL_AUTH_BRIDGE
                    ]]
                ])
                sh 'sudo git clean -fdx && sudo rm -rf build'
                def author = sh (
                    script: 'git --no-pager show -s --format=%ae',
                    returnStdout: true
                ).trim()
                def revision = sh (
                    script: 'git describe --always --tags --long',
                    returnStdout: true
                ).trim()
                currentBuild.displayName = "#${BUILD_NUMBER}: ${git_branch_tag_or_commit_AUTH_BRIDGE} (PHP ${params.php_version})"
                currentBuild.description = "Revision ${revision} by ${author}"
            }                
            dir(APP_REPO_STUDENT_COLLEGE_BRIDGE) {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '${git_branch_tag_or_commit_STUDENT_COLLEGE_BRIDGE}']],
                    extensions: [[$class: 'CloneOption', noTags: false, reference: '', shallow: true]],
                    doGenerateSubmoduleConfigurations: false,
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        credentialsId: 'github-api-hobsonsbuildserver-v2',
                        url: APP_REPO_URL_STUDENT_COLLEGE_BRIDGE
                    ]]
                ])
                sh 'sudo git clean -fdx && sudo rm -rf build'
                def author = sh (
                    script: 'git --no-pager show -s --format=%ae',
                    returnStdout: true
                ).trim()
                def revision = sh (
                    script: 'git describe --always --tags --long',
                    returnStdout: true
                ).trim()
                currentBuild.displayName = "#${BUILD_NUMBER}: ${git_branch_tag_or_commit_STUDENT_COLLEGE_BRIDGE} (PHP ${params.php_version})"
                currentBuild.description = "Revision ${revision} by ${author}"
            }                
            dir(APP_REPO_NAV_API_V1) {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '${git_branch_tag_or_commit_NAV_API_V1}']],
                    extensions: [[$class: 'CloneOption', noTags: false, reference: '', shallow: true]],
                    doGenerateSubmoduleConfigurations: false,
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        credentialsId: 'github-api-hobsonsbuildserver-v2',
                        url: APP_REPO_URL_NAV_API_V1
                    ]]
                ])
                sh 'sudo git clean -fdx && sudo rm -rf build'
                def author = sh (
                    script: 'git --no-pager show -s --format=%ae',
                    returnStdout: true
                ).trim()
                def revision = sh (
                    script: 'git describe --always --tags --long',
                    returnStdout: true
                ).trim()
                currentBuild.displayName = "#${BUILD_NUMBER}: ${git_branch_tag_or_commit_NAV_API_V1} (PHP ${params.php_version})"
                currentBuild.description = "Revision ${revision} by ${author}"
            }                
            dir(APP_REPO_NAV_API_V2) {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '${git_branch_tag_or_commit_NAV_API_V2}']],
                    extensions: [[$class: 'CloneOption', noTags: false, reference: '', shallow: true]],
                    doGenerateSubmoduleConfigurations: false,
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        credentialsId: 'github-api-hobsonsbuildserver-v2',
                        url: APP_REPO_URL_NAV_API_V2
                    ]]
                ])
                sh 'sudo git clean -fdx && sudo rm -rf build'
                def author = sh (
                    script: 'git --no-pager show -s --format=%ae',
                    returnStdout: true
                ).trim()
                def revision = sh (
                    script: 'git describe --always --tags --long',
                    returnStdout: true
                ).trim()
                currentBuild.displayName = "#${BUILD_NUMBER}: ${git_branch_tag_or_commit_NAV_API_V2} (PHP ${params.php_version})"
                currentBuild.description = "Revision ${revision} by ${author}"
            }                
            dir(APP_REPO_NAV_SERV_BETA_ASSESSMENT) {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '${git_branch_tag_or_commit_NAV_SERV_BETA_ASSESSMENT}']],
                    extensions: [[$class: 'CloneOption', noTags: false, reference: '', shallow: true]],
                    doGenerateSubmoduleConfigurations: false,
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        credentialsId: 'github-api-hobsonsbuildserver-v2',
                        url: APP_REPO_URL_NAV_SERV_BETA_ASSESSMENT
                    ]]
                ])
                sh 'sudo git clean -fdx && sudo rm -rf build'
                def author = sh (
                    script: 'git --no-pager show -s --format=%ae',
                    returnStdout: true
                ).trim()
                def revision = sh (
                    script: 'git describe --always --tags --long',
                    returnStdout: true
                ).trim()
                currentBuild.displayName = "#${BUILD_NUMBER}: ${git_branch_tag_or_commit_NAV_SERV_BETA_ASSESSMENT} (PHP ${params.php_version})"
                currentBuild.description = "Revision ${revision} by ${author}"
            }                
            dir(APP_REPO_SUCCEED_LEGACY) {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '${git_branch_tag_or_commit_SUCCEED_LEGACY}']],
                    extensions: [[$class: 'CloneOption', noTags: false, reference: '', shallow: true]],
                    doGenerateSubmoduleConfigurations: false,
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        credentialsId: 'github-api-hobsonsbuildserver-v2',
                        url: APP_REPO_URL_SUCCEED_LEGACY
                    ]]
                ])
                sh 'sudo git clean -fdx && sudo rm -rf build'
                def author = sh (
                    script: 'git --no-pager show -s --format=%ae',
                    returnStdout: true
                ).trim()
                def revision = sh (
                    script: 'git describe --always --tags --long',
                    returnStdout: true
                ).trim()
                currentBuild.displayName = "#${BUILD_NUMBER}: ${git_branch_tag_or_commit_SUCCEED_LEGACY} (PHP ${params.php_version})"
                currentBuild.description = "Revision ${revision} by ${author}"
            }
            stash includes: '**', excludes: '.git/', name: 'src'
        }
    }
}
stage('Run make build'){
    node {
        sh 'sudo chown -Rh $USER:$USER .'
        def appRepo = [APP_REPO_MOBILE_API, APP_REPO_AUTH_BRIDGE, APP_REPO_STUDENT_COLLEGE_BRIDGE, APP_REPO_NAV_API_V1, APP_REPO_NAV_API_V2,\
         APP_REPO_NAV_SERV_BETA_ASSESSMENT, APP_REPO_SUCCEED_LEGACY ]
        for( i in appRepo ) {
            if (fileExists('${i}')) {
                sh "sudo rm -rf ${i}"
            }
        }
        unstash 'src'

        wrapStep({
          dir("cloud-deployment-scripts/${APP_CODEDEPLOY_DIR}") {
            sh "make clean all PHP_VERSION=${php_version}"
          }
        })
    }
}
