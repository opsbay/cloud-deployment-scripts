#!/usr/bin/env groovy
def APP_NAME = 'cron-legacy'
def APP_REPO = 'succeed-legacy'
def APP_REPO_URL = "https://github.com/naviance/${APP_REPO}"
def APP_CODEDEPLOY_DIR = "codedeploy/${APP_NAME}"
def APP_DESCRIPTION = [
    "Git Branch, Tag, or Commit reference for ${APP_NAME}",
    'Use `develop` for PHP 5.6',
    'Use `develop-53` for PHP 5.3',
    'For releases intended for production, prefer using a numbered release tag.',
].join('\n')
def APP_DEFAULT_BRANCH = 'develop'

// LAUSD repo
def APP_NAME_LAUSD = 'naviance-lausd-etl'
def APP_REPO_LAUSD = 'naviance-lausd-etl'
def APP_RURL_LAUSD = "https://github.com/naviance/${APP_REPO_LAUSD}"
def APP_DESC_LAUSD = [
    "Git Branch, Tag, or Commit reference for ${APP_NAME_LAUSD}",
    'Use `master` for PHP 5.3 & PHP 5.6',
].join('\n')
def APP_BRANCH_LAUSD = 'master'

// Credential id name for AWS S3 access to obtain Jenkins config files.
def AWS_DEV_CREDENTIAL_ID = 'unmanaged-jenkins-terraform'
def default_timeout_minutes = 10

def wrapStep = { steps ->
    withCredentials([usernamePassword(credentialsId: AWS_DEV_CREDENTIAL_ID,
                                      passwordVariable: 'AWS_SECRET_ACCESS_KEY',
                                      usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
        wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm', 'defaultFg': 1, 'defaultBg': 2]) {
              // This is the current syntax for invoking a build wrapper, naming the class.
              wrap([$class: 'TimestamperBuildWrapper']) {
                  steps()
              }
        }
    }
}

properties([
    parameters([
        choiceParam(name: 'php_version',
                    defaultValue: "5.6",
                    description: 'PHP version to build',
                    choices: [
                       "5.3",
                       "5.6",
                    ].join("\n")),
        string(name: 'git_branch_tag_or_commit',
               description: APP_DESCRIPTION,
               defaultValue: APP_DEFAULT_BRANCH),
        string(name: 'git_branch_tag_or_commit_LAUSD',
               description: APP_DESC_LAUSD,
               defaultValue: APP_BRANCH_LAUSD),
        string(name: 'deploy_git_branch_tag_or_commit',
               description: 'Git Branch, Tag, or Commit reference for Cloud Deployment Scripts',
               defaultValue: 'master')
    ])
])

stage('Checkout') {
    parallel (
        cloud: {
            node {
                timeout(time:default_timeout_minutes, unit:'MINUTES') {
                    dir('cloud-deployment-scripts') {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: '${deploy_git_branch_tag_or_commit}']],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [],
                            submoduleCfg: [],
                            userRemoteConfigs: [[
                                credentialsId: 'github-api-hobsonsbuildserver-v2',
                                url: 'https://github.com/naviance/cloud-deployment-scripts'
                            ]]
                        ])
                        // Thanks Stack Overflow https://stackoverflow.com/a/34321368/424301
                        sh 'sudo git clean -fdx && cp env.sh.sample env.sh'
                    }
                    stash includes: 'cloud-deployment-scripts/**', name: 'src-cloud'
                }
            }
        }, app: {
            node {
                timeout(time:default_timeout_minutes, unit:'MINUTES') {
                    sh 'sudo chown -Rh centos:centos .'
                    dir(APP_REPO) {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: '${git_branch_tag_or_commit}']],
                            extensions: [[$class: 'CloneOption', noTags: false, reference: '', shallow: true]],
                            doGenerateSubmoduleConfigurations: false,
                            submoduleCfg: [],
                            userRemoteConfigs: [[
                                credentialsId: 'github-api-hobsonsbuildserver-v2',
                                url: APP_REPO_URL
                            ]]
                        ])
                        sh 'sudo git clean -fdx && sudo rm -rf build'
                        def author = sh (
                            script: 'git --no-pager show -s --format=%ae',
                            returnStdout: true
                        ).trim()
                        def revision = sh (
                            script: 'git describe --always --tags --long',
                            returnStdout: true
                        ).trim()
                        currentBuild.displayName = "#${BUILD_NUMBER}: ${git_branch_tag_or_commit} (PHP ${params.php_version})"
                        currentBuild.description = "Revision ${revision} by ${author}"
                        sh 'git describe --always --tags > TAG'
                    }
                    stash includes: "${APP_REPO}/**", name: 'src-app'
                }
            }
        }, applausd: {
            node {
                timeout(time:default_timeout_minutes, unit:'MINUTES') {
                    sh 'sudo chown -Rh centos:centos .'
                    dir(APP_REPO_LAUSD) {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: '${git_branch_tag_or_commit_LAUSD}']],
                            extensions: [[$class: 'CloneOption', noTags: false, reference: '', shallow: true]],
                            doGenerateSubmoduleConfigurations: false,
                            submoduleCfg: [],
                            userRemoteConfigs: [[
                                credentialsId: 'github-api-hobsonsbuildserver-v2',
                                url: APP_RURL_LAUSD
                            ]]
                        ])
                        sh 'sudo git clean -fdx'
                        def author = sh (
                            script: 'git --no-pager show -s --format=%ae',
                            returnStdout: true
                        ).trim()
                        def revision = sh (
                            script: 'git describe --always --tags --long',
                            returnStdout: true
                        ).trim()
                        currentBuild.displayName = "#${BUILD_NUMBER}: ${git_branch_tag_or_commit_LAUSD} (PHP ${params.php_version})"
                        currentBuild.description = "Revision ${revision} by ${author}"
                    }
                    stash includes: "${APP_REPO_LAUSD}/**", name: 'src-app-lausd'
                }
            }
        }
    )
}
stage('Run make build'){
    node {
        if (fileExists(APP_REPO)) {
            sh "sudo rm -rf ${APP_REPO}"
        }
        if (fileExists(APP_REPO_LAUSD)) {
            sh "sudo rm -rf ${APP_REPO_LAUSD}"
        }
        unstash 'src-cloud'
        unstash 'src-app'
        unstash 'src-app-lausd'
        wrapStep({
          dir("cloud-deployment-scripts/${APP_CODEDEPLOY_DIR}") {
            sh "make clean meta all PHP_VERSION=${php_version} UPSTREAM_BRANCH=${git_branch_tag_or_commit}"
          }
        })
    }
}
