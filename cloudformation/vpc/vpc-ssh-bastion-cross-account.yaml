---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC: highly available SSH bastion host/instance, a cloudonaut.io template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentAlertStack
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - InstanceType
      - KeyName
      - IAMUserSSHAccess
      - LogsRetentionInDays
      - NewRelicLicenseKey
      - SshKeyBucket
      - SshKeyLoc
      - SshLogsBucketName
      - AssumeRoleARN
      - SshGroups
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
    Default: ''
  KeyName:
    Description: 'Optional key pair of the ec2-user to establish a SSH connection to the SSH bastion host/instance.'
    Type: String
    Default: ''
  IAMUserSSHAccess:
    Description: 'Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  InstanceType:
    Description: 'Instance type of the SSH bastion host/instance.'
    Type: String
    Default: 't2.nano'
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  NewRelicLicenseKey:
    Description: 'Optional New Relic License Key will install the New Relic Servers for Linux agent.'
    Type: String
    Default: ''
    NoEcho: true
  SshKeyBucket:
    Description: 'S3 bucket name to where key files are stored'
    Type: String
    Default: ''
  SshKeyLoc:
    Description: 'Path to folder within SshKeyBucket where key files are stored'
    Type: String
    Default: 'bastion'
  SshLogsBucketName:
    Description: 'S3 bucket that holds ssh session logs. AccountID will be appended to the end.'
    Type: String
    Default: 'cf-bastion-ssh-logs'
  AssumeRoleARN:
    Description: 'ARN of the role to assume'
    Type: String
    Default: ''
  SshGroups:
    Description: 'IAM groups that have access to login (comma seperated). Leave empty for all available IAM users'
    Type: String
    Default: ''
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-52c7b43d'
    'eu-west-2':
      AMI: 'ami-b6daced2'
    'eu-west-1':
      AMI: 'ami-01ccc867'
    'ap-northeast-2':
      AMI: 'ami-9d15c7f3'
    'ap-northeast-1':
      AMI: 'ami-923d12f5'
    'sa-east-1':
      AMI: 'ami-37cfad5b'
    'ca-central-1':
      AMI: 'ami-0bd66a6f'
    'ap-southeast-1':
      AMI: 'ami-fc5ae39f'
    'ap-southeast-2':
      AMI: 'ami-162c2575'
    'eu-central-1':
      AMI: 'ami-b968bad6'
    'us-east-1':
      AMI: 'ami-9be6f38c'
    'us-east-2':
      AMI: 'ami-4191b524'
    'us-west-1':
      AMI: 'ami-7a85a01a'
    'us-west-2':
      AMI: 'ami-4836a428'
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasIAMUserSSHAccess: !Equals [!Ref IAMUserSSHAccess, 'true']
  HasNewRelic: !Not [!Equals [!Ref NewRelicLicenseKey, '']]
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
Resources:
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub ${SshLogsBucketName}-${AWS::AccountId}
      LifecycleConfiguration:
        Rules:
          - Id: S3LogLifecycle
            ExpirationInDays: 365
            Status: Enabled
      VersioningConfiguration:
        Status: Enabled
  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: S3Bucket
      PolicyDocument:
        Statement:
        - Sid: DenyUnEncryptedObjectUploads
          Effect: Deny
          Principal: "*"
          Action: s3:PutObject
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: S3Bucket
              - "/*"
          Condition:
            StringNotEquals:
              s3:x-amz-server-side-encryption: AES256
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  Logs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub
      - 'SSH bastion host/instance 10.${ClassB}.0.0/16'
      - ClassB:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-ClassB'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '4.14.235.30/32'
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '66.161.171.254/32'
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '194.168.123.98/32'
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '203.87.62.226/32'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref IAMRole
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: 'ec2'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ec2:AssociateAddress'
            Resource:
            - '*'
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogStreams'
            Resource:
            - 'arn:aws:logs:*:*:*'
      - PolicyName: s3-ssh-logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 's3:PutObject'
            Resource:
            - !Sub 'arn:aws:s3:::${S3Bucket}'
            - !Sub 'arn:aws:s3:::${S3Bucket}/*'
      - PolicyName: assume-role
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'sts:AssumeRole'
            Resource:
            - !Ref 'AssumeRoleARN'
      - PolicyName: s3-ssh-keys
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 's3:GetObject'
            Resource:
            - !Sub 'arn:aws:s3:::${SshKeyBucket}/${SshKeyLoc}/*'
  IAMPolicySSHAccess:
    Type: 'AWS::IAM::Policy'
    Condition: HasIAMUserSSHAccess
    Properties:
      Roles:
      - !Ref IAMRole
      PolicyName: iam
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 'iam:ListUsers'
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - 'iam:ListSSHPublicKeys'
          - 'iam:GetSSHPublicKey'
          Resource:
          - !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: "S3"
          roleName: !Ref IAMRole
          buckets:
            - !Ref SshKeyBucket
      'AWS::CloudFormation::Init':
        configSets:
          default:
            !If
            - HasNewRelic
            - !If [HasIAMUserSSHAccess, [ssh-access, s3sync, newrelic, config], [newrelic, config]]
            - !If [HasIAMUserSSHAccess, [ssh-access, s3sync, config], [config]]
        newrelic:
          packages:
            rpm:
              newrelic-sysmond: 'https://download.newrelic.com/pub/newrelic/el5/x86_64/newrelic-sysmond-2.3.0.132-1.x86_64.rpm'
          files:
            '/etc/newrelic/nrsysmond.cfg':
              content: !Sub |
                license_key=${NewRelicLicenseKey}
                loglevel=info
                logfile=/var/log/newrelic/nrsysmond.log
                labels=StackName:${AWS::StackName};AccountId:${AWS::AccountId};Region:${AWS::Region}
              mode: '000640'
              owner: root
              group: newrelic
          services:
            sysvinit:
              newrelic-sysmond:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/newrelic/nrsysmond.cfg'
        ssh-access:
          files:
            '/tmp/setup_ssh_logging.sh':
              content: |
                # Create a new folder for the log files
                mkdir /var/log/bastion
                # Allow ec2-user only to access this folder and its content
                chown ec2-user:ec2-user /var/log/bastion
                chmod -R 770 /var/log/bastion
                setfacl -Rdm other:0 /var/log/bastion
                # Make OpenSSH execute a custom script on logins
                echo -e "\nForceCommand /usr/bin/bastion/shell" >> /etc/ssh/sshd_config
                # Block some SSH features that bastion host users could use to circumvent
                # the solution
                awk '!/AllowTcpForwarding/' /etc/ssh/sshd_config > temp && mv temp /etc/ssh/sshd_config
                awk '!/X11Forwarding/' /etc/ssh/sshd_config > temp && mv temp /etc/ssh/sshd_config
                echo "AllowTcpForwarding no" >> /etc/ssh/sshd_config
                echo "X11Forwarding no" >> /etc/ssh/sshd_config
                mkdir /usr/bin/bastion
                cat > /usr/bin/bastion/shell << 'EOF'
                # Check that the SSH client did not supply a command
                if [[ -z $SSH_ORIGINAL_COMMAND ]]; then
                  # The format of log files is /var/log/bastion/YYYY-MM-DD_HH-MM-SS_user
                  LOG_FILE="`date --date="today" "+%Y-%m-%d_%H-%M-%S"`_`whoami`"
                  LOG_DIR="/var/log/bastion/"
                  # Print a welcome message
                  echo ""
                  echo "NOTE: This SSH session will be recorded"
                  echo "AUDIT KEY: $LOG_FILE"
                  echo ""
                  # I suffix the log file name with a random string. I explain why
                  # later on.
                  SUFFIX=`mktemp -u _XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX`
                  # Wrap an interactive shell into "script" to record the SSH session
                  script -qf --timing=$LOG_DIR$LOG_FILE$SUFFIX.time $LOG_DIR$LOG_FILE$SUFFIX.data --command=/bin/bash
                else
                  # The "script" program could be circumvented with some commands
                  # (e.g. bash, nc). Therefore, I intentionally prevent users
                  # from supplying commands.
                  echo "This bastion supports interactive sessions only. Do not supply a command"
                  exit 1
                fi
                EOF
                # Make the custom script executable
                chmod a+x /usr/bin/bastion/shell
                # Bastion host users could overwrite and tamper with an existing log file
                # using "script" if they knew the exact file name. I take several measures
                # to obfuscate the file name:
                # 1. Add a random suffix to the log file name.
                # 2. Prevent bastion host users from listing the folder containing log
                # files.
                # This is done by changing the group owner of "script" and setting GID.
                chown root:ec2-user /usr/bin/script
                chmod g+s /usr/bin/script
                # 3. Prevent bastion host users from viewing processes owned by other
                # users, because the log file name is one of the "script"
                # execution parameters.
                mount -o remount,rw,hidepid=2 /proc
                awk '!/proc/' /etc/fstab > temp && mv temp /etc/fstab
                echo "proc /proc proc defaults,hidepid=2 0 0" >> /etc/fstab
                # Restart the SSH service to apply /etc/ssh/sshd_config modifications.
                service sshd restart
              mode: '000755'
              owner: root
              group: root
            '/etc/aws-ec2-ssh.conf':
              content: !Sub |
                ASSUMEROLE="${AssumeRoleARN}"
                IAM_AUTHORIZED_GROUPS="${SshGroups}"
              mode: '000644'
              owner: root
              group: root
            '/opt/authorized_keys_command.sh':
              content: |
                #!/bin/bash -e

                if [ -z "$1" ]; then
                  exit 1
                fi

                # source configuration if it exists
                [ -f /etc/aws-ec2-ssh.conf ] && . /etc/aws-ec2-ssh.conf

                # Assume a role before contacting AWS IAM to get users and keys.
                # This can be used if you define your users in one AWS account, while the EC2
                # instance you use this script runs in another.
                : ${ASSUMEROLE:=""}

                if [[ ! -z "${ASSUMEROLE}" ]]
                then
                  STSCredentials=$(aws sts assume-role \
                    --role-arn "${ASSUMEROLE}" \
                    --role-session-name something \
                    --query '[Credentials.SessionToken,Credentials.AccessKeyId,Credentials.SecretAccessKey]' \
                    --output text)

                  AWS_ACCESS_KEY_ID=$(echo "${STSCredentials}" | awk '{print $2}')
                  AWS_SECRET_ACCESS_KEY=$(echo "${STSCredentials}" | awk '{print $3}')
                  AWS_SESSION_TOKEN=$(echo "${STSCredentials}" | awk '{print $1}')
                  AWS_SECURITY_TOKEN=$(echo "${STSCredentials}" | awk '{print $1}')
                  export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SECURITY_TOKEN
                fi

                UnsaveUserName="$1"
                UnsaveUserName=${UnsaveUserName//".plus."/"+"}
                UnsaveUserName=${UnsaveUserName//".equal."/"="}
                UnsaveUserName=${UnsaveUserName//".comma."/","}
                UnsaveUserName=${UnsaveUserName//".at."/"@"}

                aws iam list-ssh-public-keys --user-name "$UnsaveUserName" --query "SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]" --output text | while read -r KeyId; do
                  aws iam get-ssh-public-key --user-name "$UnsaveUserName" --ssh-public-key-id "$KeyId" --encoding SSH --query "SSHPublicKey.SSHPublicKeyBody" --output text
                done
              mode: '000755'
              owner: root
              group: root
            '/opt/import_users.sh':
              content: |
                #!/bin/bash -e

                # source configuration if it exists
                [ -f /etc/aws-ec2-ssh.conf ] && . /etc/aws-ec2-ssh.conf

                # Should we actually do something?
                : ${DONOTSYNC:=0}

                if [ ${DONOTSYNC} -eq 1 ]
                then
                    echo "Please configure aws-ec2-ssh by editing /etc/aws-ec2-ssh.conf"
                    exit 1
                fi

                # Which IAM groups have access to this instance
                # Comma seperated list of IAM groups. Leave empty for all available IAM users
                : ${IAM_AUTHORIZED_GROUPS:=""}

                # Special group to mark users as being synced by our script
                : ${LOCAL_MARKER_GROUP:="iam-synced-users"}

                # Give the users these local UNIX groups
                : ${LOCAL_GROUPS:=""}

                # Specify an IAM group for users who should be given sudo privileges, or leave
                # empty to not change sudo access, or give it the value '##ALL##' to have all
                # users be given sudo rights.
                # DEPRECATED! Use SUDOERS_GROUPS
                : ${SUDOERSGROUP:=""}

                # Specify a comma seperated list of IAM groups for users who should be given sudo privileges.
                # Leave empty to not change sudo access, or give the value '##ALL## to have all users
                # be given sudo rights.
                : ${SUDOERS_GROUPS:="${SUDOERSGROUP}"}

                # Assume a role before contacting AWS IAM to get users and keys.
                # This can be used if you define your users in one AWS account, while the EC2
                # instance you use this script runs in another.
                : ${ASSUMEROLE:=""}

                # Possibility to provide a custom useradd program
                : ${USERADD_PROGRAM:="/usr/sbin/useradd"}

                # Possibility to provide custom useradd arguments
                : ${USERADD_ARGS:="--create-home --shell /bin/bash"}

                function log() {
                    /usr/bin/logger -i -p auth.info -t aws-ec2-ssh "$@"
                }

                function setup_aws_credentials() {
                    local stscredentials
                    if [[ ! -z "${ASSUMEROLE}" ]]
                    then
                        stscredentials=$(aws sts assume-role \
                            --role-arn "${ASSUMEROLE}" \
                            --role-session-name something \
                            --query '[Credentials.SessionToken,Credentials.AccessKeyId,Credentials.SecretAccessKey]' \
                            --output text)

                        AWS_ACCESS_KEY_ID=$(echo "${stscredentials}" | awk '{print $2}')
                        AWS_SECRET_ACCESS_KEY=$(echo "${stscredentials}" | awk '{print $3}')
                        AWS_SESSION_TOKEN=$(echo "${stscredentials}" | awk '{print $1}')
                        AWS_SECURITY_TOKEN=$(echo "${stscredentials}" | awk '{print $1}')
                        export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SECURITY_TOKEN
                    fi
                }

                # Get all IAM users (optionally limited by IAM groups)
                function get_iam_users() {
                    local group
                    if [ -z "${IAM_AUTHORIZED_GROUPS}" ]
                    then
                        aws iam list-users \
                            --query "Users[].[UserName]" \
                            --output text \
                        | sed "s/\r//g"
                    else
                        for group in $(echo ${IAM_AUTHORIZED_GROUPS} | tr "," " "); do
                            aws iam get-group \
                                --group-name "${group}" \
                                --query "Users[].[UserName]" \
                                --output text \
                            | sed "s/\r//g"
                        done
                    fi
                }

                # Run all found iam users through clean_iam_username
                function get_clean_iam_users() {
                    local raw_username

                    for raw_username in $(get_iam_users); do
                        clean_iam_username "${raw_username}" | sed "s/\r//g"
                    done
                }

                # Get previously synced users
                function get_local_users() {
                    /usr/bin/getent group ${LOCAL_MARKER_GROUP} \
                        | cut -d : -f4- \
                        | sed "s/,/ /g"
                }

                # Get IAM users of the groups marked with sudo access
                function get_sudoers_users() {
                    local group

                    [[ -z "${SUDOERS_GROUPS}" ]] || [[ "${SUDOERS_GROUPS}" == "##ALL##" ]] ||
                        for group in $(echo "${SUDOERS_GROUPS}" | tr "," " "); do
                            aws iam get-group \
                                --group-name "${group}" \
                                --query "Users[].[UserName]" \
                                --output text
                        done
                }

                # Get the unix usernames of the IAM users within the sudo group
                function get_clean_sudoers_users() {
                    local raw_username

                    for raw_username in $(get_sudoers_users); do
                        clean_iam_username "${raw_username}"
                    done
                }

                # Create or update a local user based on info from the IAM group
                function create_or_update_local_user() {
                    local username
                    local sudousers
                    local localusergroups

                    username="${1}"
                    sudousers="${2}"
                    localusergroups="${LOCAL_MARKER_GROUP}"

                    # check that username contains only alphanumeric, period (.), underscore (_), and hyphen (-) for a safe eval
                    if [[ ! "${username}" =~ ^[0-9a-zA-Z\._\-]{1,32}$ ]]
                    then
                        echo "Local user name ${username} contains illegal characters"
                        exit 1
                    fi

                    if [ ! -z "${LOCAL_GROUPS}" ]
                    then
                        localusergroups="${LOCAL_GROUPS},${LOCAL_MARKER_GROUP}"
                    fi

                    if ! id "${username}" >/dev/null 2>&1; then
                        ${USERADD_PROGRAM} ${USERADD_ARGS} "${username}"
                        /bin/chown -R "${username}:${username}" "$(eval echo ~$username)"
                        log "Created new user ${username}"
                    fi
                    /usr/sbin/usermod -a -G "${localusergroups}" "${username}"

                    # Should we add this user to sudo ?
                    if [[ ! -z "${SUDOERS_GROUPS}" ]]
                    then
                        SaveUserFileName=$(echo "${username}" | tr "." " ")
                        SaveUserSudoFilePath="/etc/sudoers.d/$SaveUserFileName"
                        if [[ "${SUDOERS_GROUPS}" == "##ALL##" ]] || echo "${sudousers}" | grep "^${username}\$" > /dev/null
                        then
                            echo "${username} ALL=(ALL) NOPASSWD:ALL" > "${SaveUserSudoFilePath}"
                        else
                            [[ ! -f "${SaveUserSudoFilePath}" ]] || rm "${SaveUserSudoFilePath}"
                        fi
                    fi
                }

                function delete_local_user() {
                    # First, make sure no new sessions can be started
                    /usr/sbin/usermod -L -s /sbin/nologin "${1}" || true
                    # ask nicely and give them some time to shutdown
                    /usr/bin/pkill -15 -u "${1}" || true
                    sleep 5
                    # Dont want to close nicely? DIE!
                    /usr/bin/pkill -9 -u "${1}" || true
                    sleep 1
                    # Remove account now that all processes for the user are gone
                    /usr/sbin/userdel -f -r "${1}"
                    log "Deleted user ${1}"
                }

                function clean_iam_username() {
                    local clean_username="${1}"
                    clean_username=${clean_username//"+"/".plus."}
                    clean_username=${clean_username//"="/".equal."}
                    clean_username=${clean_username//","/".comma."}
                    clean_username=${clean_username//"@"/".at."}
                    echo "${clean_username}"
                }

                function sync_accounts() {
                    if [ -z "${LOCAL_MARKER_GROUP}" ]
                    then
                        echo "Please specify a local group to mark imported users. eg iam-synced-users"
                        exit 1
                    fi

                    # Check if local marker group exists, if not, create it
                    /usr/bin/getent group "${LOCAL_MARKER_GROUP}" >/dev/null 2>&1 || /usr/sbin/groupadd "${LOCAL_MARKER_GROUP}"

                    # setup the aws credentials if needed
                    setup_aws_credentials

                    # declare and set some variables
                    local iam_users
                    local sudo_users
                    local local_users
                    local intersection
                    local removed_users
                    local user

                    iam_users=$(get_clean_iam_users | sort | uniq)
                    sudo_users=$(get_clean_sudoers_users | sort | uniq)
                    local_users=$(get_local_users | sort | uniq)

                    intersection=$(echo ${local_users} ${iam_users} | tr " " "\n" | sort | uniq -D | uniq)
                    removed_users=$(echo ${local_users} ${intersection} | tr " " "\n" | sort | uniq -u)

                    # Add or update the users found in IAM
                    for user in ${iam_users}; do
                        if [ "${#user}" -le "32" ]
                        then
                            create_or_update_local_user "${user}" "$sudo_users"
                        else
                            echo "Can not import IAM user ${user}. User name is longer than 32 characters."
                        fi
                    done

                    # Remove users no longer in the IAM group(s)
                    for user in ${removed_users}; do
                        delete_local_user "${user}"
                    done
                }

                sync_accounts
              mode: '000755'
              owner: root
              group: root
            '/etc/cron.d/import_users':
              content: |
                */10 * * * * root /opt/import_users.sh
              mode: '000644'
              owner: root
              group: root
            '/etc/ssh/ssh_host_ecdsa_key':
              source: !Sub https://${SshKeyBucket}.s3.amazonaws.com/${SshKeyLoc}/ssh_host_ecdsa_key
              mode: '000600'
              owner: root
              group: root
              authentication: 'S3AccessCreds'
            '/etc/ssh/ssh_host_ed25519_key':
              source: !Sub https://${SshKeyBucket}.s3.amazonaws.com/${SshKeyLoc}/ssh_host_ed25519_key
              mode: '000600'
              owner: root
              group: ssh_keys
              authentication: 'S3AccessCreds'
            '/etc/ssh/ssh_host_rsa_key':
              source: !Sub https://${SshKeyBucket}.s3.amazonaws.com/${SshKeyLoc}/ssh_host_rsa_key
              mode: '000600'
              owner: root
              group: root
              authentication: 'S3AccessCreds'
          commands:
            'a_configure_sshd_command':
              command: 'sed -i "s:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g" /etc/ssh/sshd_config'
            'b_configure_sshd_commanduser':
              command: 'sed -i "s:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g" /etc/ssh/sshd_config'
            'c_import_users':
              command: './import_users.sh'
              cwd: '/opt'
            'd_configure_sshd_session_logging':
              command: './setup_ssh_logging.sh'
              cwd: '/tmp'
          services:
            sysvinit:
              sshd:
                enabled: true
                ensureRunning: true
                commands:
                - 'a_configure_sshd_command'
                - 'b_configure_sshd_commanduser'
                - 'd_configure_sshd_session_logging'
        s3sync:
          files:
            '/usr/bin/bastion/sync_s3':
              content: !Sub |
                # Copy log files to S3 with server-side encryption enabled.
                # Then, if successful, delete log files that are older than a day.
                LOG_DIR="/var/log/bastion/"
                aws s3 cp $LOG_DIR s3://${S3Bucket}/ --sse --region ${AWS::Region} --recursive && find $LOG_DIR* -mtime +1 -exec rm {} \;
              mode: '000700'
              owner: root
              group: root
            '/etc/crontab':
              content: |
                SHELL=/bin/bash
                PATH=/sbin:/bin:/usr/sbin:/usr/bin
                MAILTO=root
                HOME=/
                0 * * * * root /usr/bin/bastion/sync_s3
              mode: '000644'
              owner: root
              group: root
        config:
          packages:
            yum:
              awslogs: []
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${Logs}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${Logs}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${Logs}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${Logs}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${Logs}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${Logs}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${Logs}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${Logs}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${Logs}
              mode: '000644'
              owner: root
              group: root
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=LaunchConfiguration
                runas=root
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
    Properties:
      AssociatePublicIpAddress: true
      EbsOptimized: false
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      SecurityGroups:
      - !Ref SecurityGroup
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          INSTANCEID=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)
          aws --region ${AWS::Region} ec2 associate-address --instance-id $INSTANCEID --allocation-id ${EIP.AllocationId} && /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: 1
      MinSize: 1
      Tags:
      - Key: Name
        Value: !Sub
        - 'SSH bastion host/instance 10.${ClassB}.0.0/16'
        - ClassB:
            'Fn::ImportValue': !Sub '${ParentVPCStack}-ClassB'
        PropagateAtLaunch: true
      VPCZoneIdentifier: !Split
      - ','
      - 'Fn::ImportValue':
          !Sub '${ParentVPCStack}-SubnetsPublic'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT10M
        WaitOnResourceSignals: true
  CPUTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EC2'
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id'
    Value: 'vpc/vpc-ssh-bastion'
  SecurityGroup:
    Description: 'Use this Security Group to reference incoming traffic from the SSH bastion host/instance.'
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup'
  IPAddress:
    Description: 'The public IP address of the SSH bastion host/instance.'
    Value: !Ref EIP
    Export:
      Name: !Sub '${AWS::StackName}-IPAddress'
